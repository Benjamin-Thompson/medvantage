DROP PROCEDURE MAPFACILITES;
DROP PROCEDURE LOADTODATABASE;
DROP PROCEDURE LOADDASHBOARD;
SET SQL_SAFE_UPDATES=0;
DELIMITER $$

CREATE PROCEDURE MAPFACILITES(VAR_BILLER_ID INT, VAR_UPLOAD_MONTH INT, VAR_UPLOAD_YEAR INT, IS_COGS INT)
BEGIN
	IF IS_COGS = 1 THEN
		DROP TABLE IF EXISTS cogstage;
		CREATE TEMPORARY TABLE cogstage AS
		SELECT 
		a.* FROM CogsStaging a 
		WHERE `UPLOAD_MONTH` = VAR_UPLOAD_MONTH AND `UPLOAD_YEAR` = VAR_UPLOAD_YEAR;
		SELECT DISTINCT
			c.TITLE as FACILITY_NAME,
			a.FACILITY_NAME as RAW_FACILITY_NAME,
			a.UPLOAD_MONTH,
			a.UPLOAD_YEAR
		FROM cogstage a 
		LEFT JOIN Facilities_Map b ON LOWER(a.FACILITY_NAME) = LOWER(b.UGLY_FACILITY) 
		LEFT JOIN Facilities c ON b.FACILITY_ID = c.ID
		WHERE b.FACILITY_ID IS NULL; 
    ELSE
		DROP TABLE IF EXISTS paidstage;
		CREATE TEMPORARY TABLE paidstage AS
		SELECT 
		a.* FROM PaidBDSStaging a 
		WHERE `UPLOAD_MONTH` = VAR_UPLOAD_MONTH AND `UPLOAD_YEAR` = VAR_UPLOAD_YEAR AND `BILLER_ID` = VAR_BILLER_ID;
		SELECT DISTINCT
			a.BILLER_ID,
			c.TITLE as FACILITY_NAME,
			b.FACILITY_ID,
			a.FACILITY_NAME as RAW_FACILITY_NAME,
			a.UPLOAD_MONTH,
			a.UPLOAD_YEAR,
			e.TITLE as BILLER_NAME
		FROM paidstage a 
		LEFT JOIN Facilities_Map b ON UPPER(a.FACILITY_NAME) = UPPER(b.UGLY_FACILITY) 
		LEFT JOIN Facilities c ON b.FACILITY_ID = c.ID
		LEFT JOIN Billers e ON a.BILLER_ID = e.ID
		WHERE b.FACILITY_ID IS NULL; 
    END IF;
END$$

CREATE PROCEDURE LOADTODATABASE(VAR_BILLER_ID int, VAR_MONTH int, VAR_YEAR int, IS_COGS INT)
BEGIN
	DROP TABLE IF EXISTS realMap;
	CREATE TEMPORARY TABLE IF NOT EXISTS realMap AS 
    SELECT DISTINCT LOWER(UGLY_FACILITY) AS UGLY_FACILITY, FACILITY_ID FROM Facilities_Map;
	IF IS_COGS = 1 THEN
		DELETE FROM Cogs
		WHERE UPLOAD_MONTH = VAR_MONTH AND UPLOAD_YEAR = VAR_YEAR;
		INSERT INTO Cogs
        SELECT @r := @r + 1 as ID, bb.* FROM (
		SELECT
			-- @r := @r + 1 as ID,
            d.ID as REP_ID,
            a.REP_NAME,
			a.LINE_ID, 
			c.ID as FACILITY_ID,
			c.TITLE as FACILITY_NAME,
			a.FACILITY_NAME as RAW_FACILITY_NAME,
			a.COG_DATE, 
			a.TRANSACTION_TYPE, 
			a.AMOUNT, 
			a.ID_NUM, 
			a.DESC_NAME, 
			a.DESCRIPTION,         
			a.UPLOAD_MONTH,
			a.UPLOAD_YEAR,
			a.CREATED_DATE, 
			a.CREATED_BY, 
			a.MODIFIED_DATE, 
			a.MODIFIED_BY
		FROM CogsStaging a
		LEFT JOIN realMap b ON LOWER(a.FACILITY_NAME) = b.UGLY_FACILITY 
		LEFT JOIN Facilities c ON b.FACILITY_ID = c.ID
        LEFT JOIN Reps d ON a.REP_NAME = d.TITLE
        WHERE a.UPLOAD_MONTH = VAR_MONTH AND a.UPLOAD_YEAR = VAR_YEAR) bb,
		(SELECT @r := (SELECT IFNULL(MAX(ID), 0) FROM Cogs)) aa; 
    
    ELSE
		DELETE FROM PaidBDS
		WHERE BILLER_ID = VAR_BILLER_ID AND UPLOAD_MONTH = VAR_MONTH AND UPLOAD_YEAR = VAR_YEAR;
		INSERT INTO PaidBDS
        SELECT @r := @r + 1 as ID, bb.* FROM (
		SELECT
			-- @r := @r + 1 as ID,
			a.LINE_ID,
			c.ID as FACILITY_ID,
			c.TITLE as FACILITY_NAME,
			a.FACILITY_NAME as RAW_FACILITY_NAME,
			a.PATIENT_LAST_NAME, 
			a.PATIENT_FIRST_NAME, 
			a.DATE_OF_SERVICE, 
			a.PAID_AMOUNT, 
			a.PAID_DATE, 
			a.INSURANCE_COMPANY,         
			a.UPLOAD_MONTH,
			a.UPLOAD_YEAR,
			a.BILLER_ID,
			e.TITLE as BILLER_TITLE,
			a.CREATED_DATE, 
			a.CREATED_BY, 
			a.MODIFIED_DATE, 
			a.MODIFIED_BY
		FROM PaidBDSStaging a
		LEFT JOIN realMap b ON LOWER(a.FACILITY_NAME) = b.UGLY_FACILITY
		LEFT JOIN Facilities c ON b.FACILITY_ID = c.ID
		LEFT JOIN Billers e ON a.BILLER_ID = e.ID
        WHERE a.BILLER_ID = VAR_BILLER_ID AND a.UPLOAD_MONTH = VAR_MONTH AND a.UPLOAD_YEAR = VAR_YEAR) bb,
		(SELECT @r := (SELECT IFNULL(MAX(ID), 0) FROM PaidBDS)) aa;
		
		
        UPDATE Billers
        SET LAST_UPLOAD = NOW(), LAST_UPLOAD_MONTH = VAR_MONTH, LAST_UPLOAD_YEAR = VAR_YEAR WHERE ID = VAR_BILLER_ID;
    END IF;
END$$    


DROP PROCEDURE LOADDASHBOARD;
SET SQL_SAFE_UPDATES=0;
DELIMITER $$
CREATE PROCEDURE LOADDASHBOARD(VAR_UPLOAD_MONTH INT, VAR_UPLOAD_YEAR INT, ACTIVE_STATUS BOOLEAN)
BEGIN
	DROP TABLE IF EXISTS TRUE_FACILITIES;
	CREATE TABLE TRUE_FACILITIES (
		REP_ID INT NULL, 
		FACILITY_ID INT NULL, 
		COMMISSION DOUBLE NULL, 
		COMMISSIONTYPE VARCHAR(255)
	);
	INSERT INTO TRUE_FACILITIES (REP_ID, FACILITY_ID, COMMISSION, COMMISSIONTYPE)
	SELECT REP_ID, FACILITY_ID, COMMISSION, COMMISSIONTYPE FROM (
    SELECT * FROM (
	SELECT 
        CASE WHEN a.REP_ID = @rep AND a.FACILITY_ID <> @fac THEN @r := 1 
        WHEN a.REP_ID <> @rep THEN @r := 1 ELSE @r := @r + 1 END as RepNumber, 
        a.*, @rep := a.REP_ID as LastRepID, @fac := a.FACILITY_ID as LastFacilityID FROM (
	SELECT REP_ID, FACILITY_ID, COMMISSION, COMMISSIONTYPE, UPLOAD_MONTH, UPLOAD_YEAR, SHOW_FACILITY FROM Facilities_To_Rep WHERE
	CONCAT(UPLOAD_YEAR, CASE WHEN UPLOAD_MONTH < 10 THEN CONCAT('0', UPLOAD_MONTH) ELSE UPLOAD_MONTH END) * 1 <=
	CONCAT(VAR_UPLOAD_YEAR, CASE WHEN VAR_UPLOAD_MONTH < 10 THEN CONCAT('0', VAR_UPLOAD_MONTH) ELSE VAR_UPLOAD_MONTH END) * 1
	ORDER BY REP_ID, FACILITY_ID, CONCAT(UPLOAD_YEAR, CASE WHEN UPLOAD_MONTH < 10 THEN CONCAT('0', UPLOAD_MONTH) ELSE UPLOAD_MONTH END) * 1 DESC) a, (SELECT @r := 0, @rep := -1, @fac := 0) r) p
    WHERE RepNumber = 1 AND SHOW_FACILITY = 1) q;

	CREATE TEMPORARY TABLE IF NOT EXISTS PAIDTABLE AS 
	SELECT b.REP_ID, SUM(a.PAID_AMOUNT) as PAID_AMOUNT
	FROM PaidBDS a LEFT JOIN TRUE_FACILITIES b ON a.FACILITY_ID = b.FACILITY_ID
	WHERE UPLOAD_MONTH = VAR_UPLOAD_MONTH AND UPLOAD_YEAR = VAR_UPLOAD_YEAR
    GROUP BY b.REP_ID;
  
    CREATE TEMPORARY TABLE IF NOT EXISTS COGTABLE AS 
	SELECT b.REP_ID, SUM(AMOUNT) as COG_AMOUNT
	FROM Cogs a LEFT JOIN TRUE_FACILITIES b ON a.FACILITY_ID = b.FACILITY_ID
	WHERE a.UPLOAD_MONTH = VAR_UPLOAD_MONTH AND a.UPLOAD_YEAR = VAR_UPLOAD_YEAR 
    GROUP BY b.REP_ID;
    
    CREATE TEMPORARY TABLE IF NOT EXISTS FULLCOMMISSION AS 
    SELECT * FROM (
		SELECT REP_ID, FACILITY_ID, SUM((PAID_AMOUNT - COG_AMOUNT) * COMMISSION) as COMMISSION, 
        COMMISSIONTYPE,  MAX(VAR_UPLOAD_MONTH) as UPLOAD_MONTH,  MAX(VAR_UPLOAD_YEAR) as UPLOAD_YEAR FROM (
			SELECT a.*, b.COMMISSION FROM (
					SELECT a.REP_ID, a.FACILITY_ID, a.COMMISSIONTYPE, SUM(PAID_AMOUNT) as PAID_AMOUNT, SUM(COG_AMOUNT) as COG_AMOUNT FROM (
						SELECT b.REP_ID, a.FACILITY_ID, a.PAID_AMOUNT, 0 as COG_AMOUNT, b.COMMISSIONTYPE
						FROM PaidBDS a LEFT JOIN TRUE_FACILITIES b ON a.FACILITY_ID = b.FACILITY_ID
						WHERE a.UPLOAD_MONTH = VAR_UPLOAD_MONTH AND a.UPLOAD_YEAR = VAR_UPLOAD_YEAR
						UNION ALL
						SELECT b.REP_ID, a.FACILITY_ID, 0 as PAID_AMOUNT, AMOUNT as COG_AMOUNT, b.COMMISSIONTYPE
						FROM Cogs a LEFT JOIN TRUE_FACILITIES b ON a.FACILITY_ID = b.FACILITY_ID
						WHERE UPLOAD_MONTH = VAR_UPLOAD_MONTH AND UPLOAD_YEAR = VAR_UPLOAD_YEAR) a
					GROUP BY a.REP_ID, a.FACILITY_ID, a.COMMISSIONTYPE
				) a LEFT JOIN TRUE_FACILITIES b ON a.REP_ID = b.REP_ID AND a.FACILITY_ID = b.FACILITY_ID) e
		GROUP BY REP_ID, FACILITY_ID, COMMISSIONTYPE) m
    WHERE REP_ID IS NOT NULL;
    	
    CREATE TEMPORARY TABLE IF NOT EXISTS MANUALCOMMISSION AS 
    SELECT REP_ID, SUM(AMOUNT) as AMOUNT, 'MANUAL' as TYPECOMM,  
    VAR_UPLOAD_MONTH as UPLOAD_MONTH, VAR_UPLOAD_YEAR as UPLOAD_YEAR 
    FROM Manual_Overrides
    WHERE UPLOAD_MONTH = VAR_UPLOAD_MONTH AND UPLOAD_YEAR = VAR_UPLOAD_YEAR
    GROUP BY REP_ID, TYPECOMM,UPLOAD_MONTH, UPLOAD_YEAR;
    
    CREATE TEMPORARY TABLE IF NOT EXISTS OVERRIDETABLE AS
	SELECT REP_ID, 0 as PAID_TOTAL, 0 AS COG_TOTAL, 
	0 AS GENERAL_COMMISSIONS, COMMISSION AS OVERRIDE_COMMISSIONS, 0 AS MANUAL_COMMISSIONS
	FROM FULLCOMMISSION  WHERE COMMISSIONTYPE = 'OVERRIDE';   

	DELETE FROM COMMISSION_DETAIL WHERE UPLOAD_MONTH = VAR_UPLOAD_MONTH AND UPLOAD_YEAR = VAR_UPLOAD_YEAR;
    INSERT INTO COMMISSION_DETAIL (REP_ID, REP_NAME, FACILITY_NAME, PAID_TOTAL, 
    COG_TOTAL, COMMISSION, COMMISSIONTYPE,	TOTAL_COMMISSION, UPLOAD_MONTH, UPLOAD_YEAR, ISACTIVE)
	 SELECT b.ID as REP_ID, b.TITLE as REP_NAME, c.TITLE as FACILITY_NAME, a.PAID_TOTAL,
		a.COG_TOTAL, a.COMMISSION, a.COMMISSIONTYPE, a.TOTAL_COMMISSION,
		VAR_UPLOAD_MONTH as UPM, VAR_UPLOAD_YEAR as UPY, ACTIVE_STATUS as ISACTIVE FROM (
			SELECT REP_ID, FACILITY_ID,
			ROUND(SUM(PAID_TOTAL), 2) as PAID_TOTAL,
			ROUND(SUM(COG_TOTAL), 2) as COG_TOTAL,
			COMMISSION,
			ROUND(SUM(TOTAL_COMMISSION), 2) as TOTAL_COMMISSION,
			COMMISSIONTYPE
			FROM (
			SELECT b.REP_ID, b.FACILITY_ID, SUM(a.PAID_AMOUNT) as PAID_TOTAL, SUM(0) as COG_TOTAL, 
			b.COMMISSION, SUM(0) as TOTAL_COMMISSION, b.COMMISSIONTYPE
			FROM PaidBDS a LEFT JOIN TRUE_FACILITIES b ON a.FACILITY_ID = b.FACILITY_ID
			WHERE UPLOAD_MONTH = VAR_UPLOAD_MONTH AND UPLOAD_YEAR = VAR_UPLOAD_YEAR
			GROUP BY b.REP_ID, b.FACILITY_ID, b.COMMISSION, b.COMMISSIONTYPE        
			
			UNION ALL
			
			SELECT b.REP_ID, b.FACILITY_ID, SUM(0) as PAID_TOTAL, SUM(AMOUNT) as COG_AMOUNT, 
			b.COMMISSION, SUM(0) as TOTAL_COMMISSION, b.COMMISSIONTYPE
			FROM Cogs a LEFT JOIN TRUE_FACILITIES b ON a.FACILITY_ID = b.FACILITY_ID
			WHERE UPLOAD_MONTH = VAR_UPLOAD_MONTH AND UPLOAD_YEAR = VAR_UPLOAD_YEAR 
			GROUP BY b.REP_ID, b.FACILITY_ID, b.COMMISSION, b.COMMISSIONTYPE      
			
			UNION ALL
			
			 SELECT * FROM (
				SELECT REP_ID, FACILITY_ID, SUM(0) as PAID_TOTAL, SUM(0) as COG_AMOUNT, 
				COMMISSION, SUM((PAID_AMOUNT - COG_AMOUNT) * COMMISSION) as TOTAL_COMMISSION, COMMISSIONTYPE
				FROM (
					SELECT a.*, b.COMMISSION FROM (
							SELECT REP_ID, FACILITY_ID, COMMISSIONTYPE, SUM(PAID_AMOUNT) as PAID_AMOUNT, SUM(COG_AMOUNT) as COG_AMOUNT FROM (
								SELECT b.REP_ID, a.FACILITY_ID, a.PAID_AMOUNT, 0 as COG_AMOUNT, b.COMMISSIONTYPE
								FROM PaidBDS a LEFT JOIN TRUE_FACILITIES b ON a.FACILITY_ID = b.FACILITY_ID
								WHERE UPLOAD_MONTH = VAR_UPLOAD_MONTH AND UPLOAD_YEAR = VAR_UPLOAD_YEAR
								UNION ALL
								SELECT b.REP_ID, a.FACILITY_ID, 0 as PAID_AMOUNT, AMOUNT as COG_AMOUNT, b.COMMISSIONTYPE
								FROM Cogs a LEFT JOIN TRUE_FACILITIES b ON a.FACILITY_ID = b.FACILITY_ID
								WHERE UPLOAD_MONTH = VAR_UPLOAD_MONTH AND UPLOAD_YEAR = VAR_UPLOAD_YEAR) a
							GROUP BY REP_ID, FACILITY_ID, COMMISSIONTYPE
						) a LEFT JOIN TRUE_FACILITIES b ON a.REP_ID = b.REP_ID AND a.FACILITY_ID = b.FACILITY_ID) e
				GROUP BY REP_ID, FACILITY_ID, COMMISSION, COMMISSIONTYPE) m
			WHERE REP_ID IS NOT NULL
			UNION ALL
			SELECT REP_ID, NULL as FACILITY_ID, 0 as PAID_TOTAL, 0 AS COG_TOTAL, 
			0 as COMMISSION, AMOUNT as TOTAL_COMMISSION, 'MANUAL' as COMMISSIONTYPE
			FROM MANUALCOMMISSION) a
			WHERE REP_ID IS NOT NULL
			GROUP BY REP_ID, FACILITY_ID, COMMISSION, COMMISSIONTYPE) a 
		LEFT JOIN Reps b ON a.REP_ID = b.ID
		LEFT JOIN Facilities c ON a.FACILITY_ID = c.ID;      
       
    DELETE FROM COMMISSION_TABLE WHERE UPLOAD_MONTH = VAR_UPLOAD_MONTH AND UPLOAD_YEAR = VAR_UPLOAD_YEAR;
    INSERT INTO COMMISSION_TABLE (REP_ID, PAID_TOTAL, COG_TOTAL, TOTAL_COMMISSIONS, GENERAL_COMMISSIONS, OVERRIDE_COMMISSIONS, MANUAL_COMMISSIONS, UPLOAD_MONTH, UPLOAD_YEAR, REP_NAME, ISACTIVE)
    SELECT a.*, VAR_UPLOAD_MONTH as UPM, VAR_UPLOAD_YEAR as UPY, b.TITLE as REP_NAME, ACTIVE_STATUS as ISACTIVE FROM (
		SELECT REP_ID, 
		ROUND(SUM(PAID_TOTAL), 2) as PAID_TOTAL,
		ROUND(SUM(COG_TOTAL), 2) as COG_TOTAL,
        ROUND(SUM(GENERAL_COMMISSIONS) + SUM(OVERRIDE_COMMISSIONS) + SUM(MANUAL_COMMISSIONS), 2) as TOTAL_COMMISSIONS,
		ROUND(SUM(GENERAL_COMMISSIONS), 2) as GENERAL_COMMISSIONS,
		ROUND(SUM(OVERRIDE_COMMISSIONS), 2) as OVERRIDE_COMMISSIONS,
		ROUND(SUM(MANUAL_COMMISSIONS), 2) as MANUAL_COMMISSIONS
		FROM (
		SELECT REP_ID, PAID_AMOUNT as PAID_TOTAL, 0 AS COG_TOTAL, 
		0 AS GENERAL_COMMISSIONS, 0 AS OVERRIDE_COMMISSIONS, 0 AS MANUAL_COMMISSIONS
		FROM PAIDTABLE
		UNION ALL
		SELECT REP_ID, 0 as PAID_TOTAL, COG_AMOUNT AS COG_TOTAL, 
		0 AS GENERAL_COMMISSIONS, 0 AS OVERRIDE_COMMISSIONS, 0 AS MANUAL_COMMISSIONS
		FROM COGTABLE    
		UNION ALL
		SELECT REP_ID, 0 as PAID_TOTAL, 0 AS COG_TOTAL, 
		COMMISSION AS GENERAL_COMMISSIONS, 0 AS OVERRIDE_COMMISSIONS, 0 AS MANUAL_COMMISSIONS
		FROM FULLCOMMISSION  WHERE COMMISSIONTYPE = 'GENERAL'    
		UNION ALL
		SELECT * FROM OVERRIDETABLE 
		UNION ALL
		SELECT REP_ID, 0 as PAID_TOTAL, 0 AS COG_TOTAL, 
		0 AS GENERAL_COMMISSIONS, 0 AS OVERRIDE_COMMISSIONS, AMOUNT AS MANUAL_COMMISSIONS
		FROM MANUALCOMMISSION) a
        WHERE REP_ID IS NOT NULL
		GROUP BY REP_ID) a 
	LEFT JOIN Reps b ON a.REP_ID = b.ID;
    
    SELECT ISACTIVE FROM COMMISSION_TABLE
    WHERE UPLOAD_MONTH = VAR_UPLOAD_MONTH AND UPLOAD_YEAR = VAR_UPLOAD_YEAR
    LIMIT 1;

	DROP TABLE IF EXISTS TRUE_FACILITIES;
    DROP TABLE IF EXISTS PAIDTABLE;
    DROP TABLE IF EXISTS COGTABLE;
    DROP TABLE IF EXISTS FULLCOMMISSION;
    DROP TABLE IF EXISTS MANUALCOMMISSION;
    DROP TABLE IF EXISTS OVERRIDETABLE;
END$$
DELIMITER ;
